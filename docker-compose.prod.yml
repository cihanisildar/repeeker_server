version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: repeeker_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-repeeker_db}
      POSTGRES_USER: ${POSTGRES_USER:-repeeker_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - repeeker_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-repeeker_user} -d ${POSTGRES_DB:-repeeker_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: repeeker_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - repeeker_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: repeeker_app_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-repeeker_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-repeeker_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - PORT=8080
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4-turbo-preview}
    volumes:
      - ./logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - repeeker_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 1

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: repeeker_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    networks:
      - repeeker_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Database Backup Service
  db_backup:
    image: postgres:15-alpine
    container_name: repeeker_backup_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-repeeker_db}
      POSTGRES_USER: ${POSTGRES_USER:-repeeker_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - repeeker_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: |
      sh -c '
        apk add --no-cache dcron
        echo "$$BACKUP_SCHEDULE /usr/local/bin/backup.sh" | crontab -
        crond -f
      '
    profiles:
      - backup

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  app_uploads:
    driver: local
  nginx_cache:
    driver: local

networks:
  repeeker_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: repeeker_br0 