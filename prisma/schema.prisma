// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?     // For credentials login
  googleId      String?     @unique // For Google OAuth users
  accounts      Account[]
  sessions      Session[]
  cards         Card[]
  wordLists     WordList[]
  cardProgress  CardProgress[]
  lastTestDate  DateTime?
  lastReviewDate DateTime?
  reviewSchedule ReviewSchedule?
  testSessions  TestSession[]
  currentStreak Int         @default(0)
  longestStreak Int         @default(0)
  streakUpdatedAt DateTime  @default(now())
  reviewSessions ReviewSession[]
  settings      UserSettings?
}

model ReviewSchedule {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  intervals   Int[]    // Array of intervals in days (default: [1, 7, 30, 365])
  isDefault   Boolean  @default(true) // Whether using default schedule
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @default("Default Schedule")
  description String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WordList {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)  // Controls if the list is public or private
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards       Card[]
}

model Card {
  id           String       @id @default(cuid())
  word         String
  definition   String
  viewCount    Int         @default(0)
  successCount Int         @default(0)
  failureCount Int         @default(0)
  lastReviewed DateTime?
  nextReview   DateTime    @default(now())
  reviewStatus ReviewStatus @default(ACTIVE)
  reviewStep   Int         @default(-1)
  // SM-2 Algorithm fields
  easeFactor   Float       @default(2.5)  // Standard SM-2 starting ease factor
  interval     Int         @default(1)    // Current interval in days
  consecutiveCorrect Int   @default(0)    // Consecutive correct answers
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  wordListId   String?
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordList     WordList?   @relation(fields: [wordListId], references: [id], onDelete: SetNull)
  wordDetails  WordDetails?
  progress     CardProgress[]
  testResults  TestResult[]
  reviews      Review[]

  @@unique([word, userId])
}

model CardProgress {
  id             String    @id @default(cuid())
  viewCount      Int       @default(0)
  successCount   Int       @default(0)
  failureCount   Int       @default(0)
  lastReviewed   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  originalCardId String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalCard   Card      @relation(fields: [originalCardId], references: [id], onDelete: Cascade)

  @@unique([userId, originalCardId])
}

enum ReviewStatus {
  ACTIVE    // Card is currently in review period
  COMPLETED // Review period is finished
  PAUSED    // Review temporarily paused
}

model WordDetails {
  id        String   @id @default(cuid())
  cardId    String   @unique
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  synonyms  String[] // Array of synonyms
  antonyms  String[] // Array of antonyms
  examples  String[] // Array of example sentences
  notes     String?  // Additional notes about the word
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestSession {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  results   TestResult[]
}

model TestResult {
  id           String      @id @default(cuid())
  sessionId    String
  session      TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  cardId       String
  card         Card        @relation(fields: [cardId], references: [id], onDelete: Cascade)
  isCorrect    Boolean
  timeSpent    Int        // Time spent in milliseconds
  createdAt    DateTime   @default(now())
}

model Review {
  id        String   @id @default(cuid())
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  isSuccess Boolean
  quality   Int      @default(3)  // Response quality: 0=Again, 1=Hard, 2=Good, 3=Easy
  createdAt DateTime @default(now())
}

model Suggestion {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
}

model ReviewSession {
  id           String   @id @default(uuid())
  userId       String
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  isRepeat     Boolean  @default(false)
  mode         String   // 'flashcard' or 'multiple-choice'
  cards        Json     // Store card IDs or details for the session
  user         User     @relation(fields: [userId], references: [id])
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean  @default(true)
  reviewReminders    Boolean  @default(true)
  publicProfile      Boolean  @default(false)
  shareStatistics    Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}